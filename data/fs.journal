
{"operation":"update","timestamp":{"$$date":1755509600538},"version":623,"doc":{"name":"informeInteligente","engine":"handlebars","recipe":"chrome-pdf","data":{"shortid":"IntelData"},"shortid":"IntelTmpl","chrome":{"printBackground":true,"waitForJS":false,"waitForNetworkIdle":false,"format":"A4","marginTop":"18mm","marginBottom":"18mm","marginLeft":"16mm","marginRight":"16mm"},"creationDate":{"$$date":1723701000000},"modificationDate":{"$$date":1755509600507},"inheritedReadPermissions":[],"inheritedEditPermissions":[],"_id":"intel_template_id","$entitySet":"templates","scripts":[],"content":"<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Informe Inteligente - {{datosPersonales.nombreCompleto}}</title>\r\n  <style>{{{asset \"inteligente-styles.css\"}}}</style>\r\n</head>\r\n<body class=\"report {{#if __layout.isLandscape}}landscape{{/if}}\" data-breadcrumb=\"Informe de Selección\">\r\n  \r\n  <!-- HEADER PRINCIPAL -->\r\n  <header class=\"main-header\" data-breadcrumb=\"Cabecera\">\r\n    <div class=\"header-grid\">\r\n      <div class=\"brand-section\">\r\n        <img class=\"logo\" src=\"{{asset '/assets/logos/001LogotipoGrupompleo.png' 'dataURI'}}\" alt=\"Grupo Empleo\" />\r\n        <div class=\"brand-text\">\r\n          <h1 class=\"brand-name\">GRUPO EMPLEO</h1>\r\n          <p class=\"brand-tagline\">Recursos Humanos · Sector Industrial</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"report-meta\">\r\n        <span class=\"report-type\">{{tipoInforme}}</span>\r\n        <span class=\"report-date\">{{formatDate fechaEmision}}</span>\r\n        <span class=\"report-id\">#{{idInforme}}</span>\r\n      </div>\r\n    </div>\r\n  </header>\r\n\r\n  <!-- INFORMACIÓN DEL CANDIDATO -->\r\n  <section class=\"candidate-header module\" data-breadcrumb=\"Datos del Candidato\">\r\n    <div class=\"candidate-grid\">\r\n      <div class=\"candidate-photo-wrapper\">\r\n  {{#if datosPersonales.foto}}\r\n      <img\r\n    class=\"candidate-photo\"\r\n    src=\"{{asset '/assets/profiles/voluntario.png' 'dataURI'}}\"\r\n    alt=\"Foto\"\r\n  />\r\n  {{/if}}\r\n</div>\r\n      <div class=\"candidate-info\">\r\n        <h2 class=\"candidate-name\">{{datosPersonales.nombreCompleto}}</h2>\r\n        <div class=\"info-grid\">\r\n          <div class=\"info-item\">\r\n            <span class=\"info-label\">Edad</span>\r\n            <span class=\"info-value\">{{datosPersonales.edad}} años</span>\r\n          </div>\r\n          <div class=\"info-item\">\r\n            <span class=\"info-label\">Ubicación</span>\r\n            <span class=\"info-value\">{{datosPersonales.municipio}}, {{datosPersonales.pais}}</span>\r\n          </div>\r\n          <div class=\"info-item\">\r\n            <span class=\"info-label\">Email</span>\r\n            <span class=\"info-value\">{{datosPersonales.email}}</span>\r\n          </div>\r\n          <div class=\"info-item\">\r\n            <span class=\"info-label\">Teléfono</span>\r\n            <span class=\"info-value\">{{datosPersonales.telefonoMovil}}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {{#if informe.puntuacion}}\r\n      <div class=\"candidate-score\">\r\n        <div class=\"score-circle\">\r\n          <span class=\"score-value\">{{informe.puntuacion}}</span>\r\n          <span class=\"score-max\">/10</span>\r\n        </div>\r\n        <span class=\"score-label\">Puntuación Global</span>\r\n      </div>\r\n      {{/if}}\r\n    </div>\r\n  </section>\r\n\r\n  <!-- ITERACIÓN DE MÓDULOS DINÁMICOS -->\r\n  {{#each modulos}}\r\n  <section class=\"module module-{{@index}}\" data-breadcrumb=\"{{this.titulo}}\">\r\n    <header class=\"module-header\">\r\n      <h2 class=\"module-title\">{{this.titulo}}</h2>\r\n      {{#if this.subtitulo}}\r\n        <p class=\"module-subtitle\">{{this.subtitulo}}</p>\r\n      {{/if}}\r\n    </header>\r\n    \r\n    <div class=\"module-content\">\r\n      {{#each this.secciones}}\r\n      <div class=\"section\" data-breadcrumb=\"{{../titulo}} › {{this.nombre}}\">\r\n        <h3 class=\"section-title\">{{this.nombre}}</h3>\r\n        \r\n        {{#if this.tipo}}\r\n          {{#ifEquals this.tipo \"texto\"}}\r\n            <div class=\"text-content\">\r\n              {{#each (splitParagraphs this.contenido)}}\r\n                <p class=\"paragraph no-break\">{{this}}</p>\r\n              {{/each}}\r\n            </div>\r\n          {{/ifEquals}}\r\n          \r\n          {{#ifEquals this.tipo \"lista\"}}\r\n            <ul class=\"list-content\">\r\n              {{#each this.items}}\r\n                <li class=\"list-item no-break\" data-breadcrumb=\"{{../../titulo}} › {{../nombre}} › Item {{@index}}\">\r\n                  {{#if this.titulo}}<strong>{{this.titulo}}</strong>{{/if}}\r\n                  {{#if this.descripcion}}<span class=\"item-desc\">{{this.descripcion}}</span>{{/if}}\r\n                  {{#if this.fecha}}<span class=\"item-date\">{{formatDate this.fecha}}</span>{{/if}}\r\n                </li>\r\n              {{/each}}\r\n            </ul>\r\n          {{/ifEquals}}\r\n          \r\n          {{#ifEquals this.tipo \"tabla\"}}\r\n            <div class=\"table-wrapper\">\r\n              <table class=\"data-table\">\r\n                <thead>\r\n                  <tr>\r\n                    {{#each this.columnas}}\r\n                      <th>{{this}}</th>\r\n                    {{/each}}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {{#each this.filas}}\r\n                    <tr class=\"no-break\">\r\n                      {{#each this}}\r\n                        <td>{{this}}</td>\r\n                      {{/each}}\r\n                    </tr>\r\n                  {{/each}}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          {{/ifEquals}}\r\n          \r\n          {{#ifEquals this.tipo \"cards\"}}\r\n            <div class=\"cards-grid\">\r\n              {{#each this.items}}\r\n                <div class=\"card no-break\" data-breadcrumb=\"{{../../titulo}} › {{../nombre}} › {{this.titulo}}\">\r\n                  <h4 class=\"card-title\">{{this.titulo}}</h4>\r\n                  {{#if this.puntuacion}}\r\n                    <div class=\"card-score\">{{this.puntuacion}}</div>\r\n                  {{/if}}\r\n                  <p class=\"card-content\">{{this.contenido}}</p>\r\n                </div>\r\n              {{/each}}\r\n            </div>\r\n          {{/ifEquals}}\r\n        {{/if}}\r\n      </div>\r\n      {{/each}}\r\n    </div>\r\n  </section>\r\n  {{/each}}\r\n  \r\n  <div> {{debug modulos}} </div>\r\n\r\n  \r\n\r\n\r\n  <!-- FOOTER -->\r\n  <footer class=\"page-footer\">\r\n    <div class=\"footer-content\">\r\n      <span class=\"confidential\">CONFIDENCIAL - Uso exclusivo del cliente</span>\r\n      <span class=\"page-info\">\r\n        <span class=\"page-number\"></span> / <span class=\"total-pages\"></span>\r\n      </span>\r\n    </div>\r\n  </footer>\r\n\r\n  <!-- MEASUREMENT SERVICE -->\r\n  <script>\r\n    // Se inyectará desde measurement-service.js\r\n    if (typeof window.MeasurementService !== 'undefined') {\r\n      const service = new window.MeasurementService();\r\n      service.initialize();\r\n    }\r\n  </script>\r\n\r\n  <script>\r\n  window.addEventListener('load', () => {\r\n    window.JSREPORT_READY_TO_START = true;\r\n  });\r\n</script>\r\n</body>\r\n</html>","helpers":"/**\r\n * HELPERS PARA INFORME INTELIGENTE\r\n * FASE 1 - Fundamentos\r\n * Funciones auxiliares para el template Handlebars\r\n */\r\n\r\n/**\r\n * Formatea una fecha en formato DD/MM/YYYY\r\n * @param {string|Date} date - Fecha a formatear\r\n * @returns {string} Fecha formateada\r\n */\r\nfunction formatDate(date) {\r\n  if (!date) return '';\r\n  \r\n  const d = new Date(date);\r\n  if (isNaN(d.getTime())) return '';\r\n  \r\n  const day = String(d.getDate()).padStart(2, '0');\r\n  const month = String(d.getMonth() + 1).padStart(2, '0');\r\n  const year = d.getFullYear();\r\n  \r\n  return `${day}/${month}/${year}`;\r\n}\r\n\r\n/**\r\n * Formatea un rango de fechas\r\n * @param {string|Date} start - Fecha de inicio\r\n * @param {string|Date} end - Fecha de fin (opcional)\r\n * @returns {string} Rango formateado\r\n */\r\nfunction formatDateRange(start, end) {\r\n  const startStr = formatDate(start);\r\n  const endStr = end ? formatDate(end) : 'Actualidad';\r\n  \r\n  return `${startStr} - ${endStr}`;\r\n}\r\n\r\n/**\r\n * Extrae el año de una fecha\r\n * @param {string|Date} date - Fecha\r\n * @returns {number|string} Año o cadena vacía\r\n */\r\nfunction getYear(date) {\r\n  if (!date) return '';\r\n  const d = new Date(date);\r\n  return isNaN(d.getTime()) ? '' : d.getFullYear();\r\n}\r\n\r\n/**\r\n * Divide un texto en párrafos por líneas en blanco\r\n * @param {string} text - Texto a dividir\r\n * @returns {Array<string>} Array de párrafos\r\n */\r\nfunction splitParagraphs(text) {\r\n  if (!text) return [];\r\n  \r\n  return String(text)\r\n    .trim()\r\n    .split(/\\r?\\n\\s*\\r?\\n/)\r\n    .map(p => p.trim())\r\n    .filter(Boolean);\r\n}\r\n\r\n/**\r\n * Convierte bullets/puntos en párrafos\r\n * @param {string} text - Texto con bullets\r\n * @returns {Array<Object>} Array de objetos con tipo y contenido\r\n */\r\nfunction parseBullets(text) {\r\n  if (!text) return [];\r\n  \r\n  const lines = String(text).trim().split(/\\r?\\n/);\r\n  const result = [];\r\n  \r\n  lines.forEach(line => {\r\n    const trimmed = line.trim();\r\n    if (!trimmed) return;\r\n    \r\n    // Detectar diferentes tipos de bullets\r\n    const bulletMatch = trimmed.match(/^[\\-\\*\\•\\▸\\►]\\s*(.+)$/);\r\n    const numberedMatch = trimmed.match(/^\\d+[\\.\\)]\\s*(.+)$/);\r\n    const letterMatch = trimmed.match(/^[a-zA-Z][\\.\\)]\\s*(.+)$/);\r\n    \r\n    if (bulletMatch) {\r\n      result.push({\r\n        type: 'bullet',\r\n        content: bulletMatch[1].trim()\r\n      });\r\n    } else if (numberedMatch) {\r\n      result.push({\r\n        type: 'numbered',\r\n        content: numberedMatch[1].trim()\r\n      });\r\n    } else if (letterMatch) {\r\n      result.push({\r\n        type: 'letter',\r\n        content: letterMatch[1].trim()\r\n      });\r\n    } else {\r\n      result.push({\r\n        type: 'paragraph',\r\n        content: trimmed\r\n      });\r\n    }\r\n  });\r\n  \r\n  return result;\r\n}\r\n\r\n/**\r\n * Helper condicional para comparar valores\r\n * @param {any} a - Primer valor\r\n * @param {any} b - Segundo valor\r\n * @param {Object} options - Opciones de Handlebars\r\n * @returns {string} Contenido del bloque si coinciden\r\n */\r\nfunction ifEquals(a, b, options) {\r\n  if (a === b) {\r\n    return options.fn(this);\r\n  }\r\n  return options.inverse(this);\r\n}\r\n\r\n/**\r\n * Helper para verificar si un valor está en un array\r\n * @param {any} value - Valor a buscar\r\n * @param {Array} array - Array donde buscar\r\n * @param {Object} options - Opciones de Handlebars\r\n * @returns {string} Contenido del bloque si está incluido\r\n */\r\nfunction ifInArray(value, array, options) {\r\n  if (Array.isArray(array) && array.includes(value)) {\r\n    return options.fn(this);\r\n  }\r\n  return options.inverse(this);\r\n}\r\n\r\n/**\r\n * Helper OR lógico\r\n * @param {...any} args - Argumentos a evaluar\r\n * @returns {string} Contenido del bloque si alguno es verdadero\r\n */\r\nfunction or() {\r\n  const args = Array.prototype.slice.call(arguments, 0, -1);\r\n  const options = arguments[arguments.length - 1];\r\n  \r\n  if (args.some(Boolean)) {\r\n    return options.fn(this);\r\n  }\r\n  return options.inverse(this);\r\n}\r\n\r\n/**\r\n * Helper AND lógico\r\n * @param {...any} args - Argumentos a evaluar\r\n * @returns {string} Contenido del bloque si todos son verdaderos\r\n */\r\nfunction and() {\r\n  const args = Array.prototype.slice.call(arguments, 0, -1);\r\n  const options = arguments[arguments.length - 1];\r\n  \r\n  if (args.every(Boolean)) {\r\n    return options.fn(this);\r\n  }\r\n  return options.inverse(this);\r\n}\r\n\r\n/**\r\n * Trunca un texto a un número máximo de caracteres\r\n * @param {string} text - Texto a truncar\r\n * @param {number} length - Longitud máxima\r\n * @param {string} suffix - Sufijo a añadir (por defecto \"...\")\r\n * @returns {string} Texto truncado\r\n */\r\nfunction truncate(text, length, suffix = '...') {\r\n  if (!text) return '';\r\n  \r\n  const str = String(text);\r\n  if (str.length <= length) return str;\r\n  \r\n  return str.substring(0, length - suffix.length) + suffix;\r\n}\r\n\r\n/**\r\n * Calcula la edad a partir de una fecha de nacimiento\r\n * @param {string|Date} birthDate - Fecha de nacimiento\r\n * @returns {number} Edad en años\r\n */\r\nfunction calculateAge(birthDate) {\r\n  if (!birthDate) return 0;\r\n  \r\n  const birth = new Date(birthDate);\r\n  if (isNaN(birth.getTime())) return 0;\r\n  \r\n  const today = new Date();\r\n  let age = today.getFullYear() - birth.getFullYear();\r\n  const monthDiff = today.getMonth() - birth.getMonth();\r\n  \r\n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n    age--;\r\n  }\r\n  \r\n  return age;\r\n}\r\n\r\n/**\r\n * Genera la URL de un asset\r\n * @param {string} path - Ruta relativa del asset\r\n * @returns {string} URL completa del asset\r\n */\r\nfunction assetUrl(path) {\r\n  // En JSReport, los assets se referencian de forma especial\r\n  // Esta función puede adaptarse según la configuración\r\n  return `/assets/${path}`;\r\n}\r\n\r\n/**\r\n * Capitaliza la primera letra de un texto\r\n * @param {string} text - Texto a capitalizar\r\n * @returns {string} Texto capitalizado\r\n */\r\nfunction capitalize(text) {\r\n  if (!text) return '';\r\n  const str = String(text);\r\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\r\n}\r\n\r\n/**\r\n * Convierte un texto a mayúsculas\r\n * @param {string} text - Texto\r\n * @returns {string} Texto en mayúsculas\r\n */\r\nfunction uppercase(text) {\r\n  return text ? String(text).toUpperCase() : '';\r\n}\r\n\r\n/**\r\n * Convierte un texto a minúsculas\r\n * @param {string} text - Texto\r\n * @returns {string} Texto en minúsculas\r\n */\r\nfunction lowercase(text) {\r\n  return text ? String(text).toLowerCase() : '';\r\n}\r\n\r\n/**\r\n * Formatea un número con separadores de miles\r\n * @param {number} num - Número a formatear\r\n * @param {string} separator - Separador (por defecto \".\")\r\n * @returns {string} Número formateado\r\n */\r\nfunction formatNumber(num, separator = '.') {\r\n  if (num === null || num === undefined) return '';\r\n  \r\n  return String(num).replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\r\n}\r\n\r\n/**\r\n * Calcula un porcentaje\r\n * @param {number} value - Valor\r\n * @param {number} total - Total\r\n * @param {number} decimals - Decimales (por defecto 0)\r\n * @returns {string} Porcentaje formateado\r\n */\r\nfunction percentage(value, total, decimals = 0) {\r\n  if (!total || !value) return '0%';\r\n  \r\n  const percent = (value / total) * 100;\r\n  return percent.toFixed(decimals) + '%';\r\n}\r\n\r\n/**\r\n * Helper para debugging - imprime el contexto actual\r\n * @param {any} context - Contexto a imprimir\r\n * @returns {string} JSON del contexto\r\n */\r\nfunction debug(context) {\r\n  console.log('DEBUG:', JSON.stringify(context, null, 2));\r\n  return '';\r\n}\r\n\r\n/**\r\n * Hook beforeRender para procesar datos antes del renderizado\r\n * @param {Object} req - Request de JSReport\r\n * @param {Object} res - Response de JSReport\r\n * @param {Function} done - Callback\r\n */\r\nfunction beforeRender(req, res, done) {\r\n  const data = req.data || {};\r\n  \r\n  // Asegurar que los arrays existen\r\n  const arrays = [\r\n    'modulos',\r\n    'experienciasLaborales',\r\n    'formaciones',\r\n    'competencias',\r\n    'idiomas',\r\n    'referencias'\r\n  ];\r\n  \r\n  arrays.forEach(key => {\r\n    if (!Array.isArray(data[key])) {\r\n      data[key] = [];\r\n    }\r\n  });\r\n  \r\n  // Calcular métricas para decisión de layout\r\n  let totalChars = 0;\r\n  let totalItems = 0;\r\n  \r\n  // Contar caracteres en campos de texto largos\r\n  const textFields = [\r\n    'informe.motivoPresentacion',\r\n    'informe.aspectosPersonales',\r\n    'informe.trayectoriaFormativa',\r\n    'informe.trayectoriaProfesional',\r\n    'informe.entrevistaPersonal',\r\n    'informe.valoracion'\r\n  ];\r\n  \r\n  textFields.forEach(path => {\r\n    const value = path.split('.').reduce((obj, key) => obj?.[key], data);\r\n    if (value) {\r\n      totalChars += String(value).length;\r\n    }\r\n  });\r\n  \r\n  // Contar elementos en arrays\r\n  arrays.forEach(key => {\r\n    if (data[key]) {\r\n      totalItems += data[key].length;\r\n    }\r\n  });\r\n  \r\n  // Decisión de orientación basada en volumen de contenido\r\n  // FASE 1: Lógica simple, se refinará en fases posteriores\r\n  const isLandscape = totalChars > 5000 || totalItems > 50;\r\n  \r\n  // Inyectar información de layout\r\n  data.__layout = {\r\n    isLandscape,\r\n    totalChars,\r\n    totalItems,\r\n    estimatedPages: Math.ceil((totalChars + totalItems * 100) / 3000)\r\n  };\r\n  \r\n  // Inyectar el CSS como string\r\n  data.styles = req.template.styles || '';\r\n  \r\n  req.data = data;\r\n  done();\r\n}\r\n\r\n","folder":{"shortid":"IntelMain"},"$$etag":1755509600538}}
